// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: discounts.sql

package database

import (
	"context"
)

const addDiscount = `-- name: AddDiscount :one
INSERT INTO discounts (id, created_at, updated_at, title, url, image, category, price, og_price, discount)
VALUES (
    gen_random_uuid(),
    NOW(),
    NOW(),
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7
)
RETURNING id, created_at, updated_at, title, url, image, category, price, og_price, discount
`

type AddDiscountParams struct {
	Title    string
	Url      string
	Image    string
	Category string
	Price    string
	OgPrice  string
	Discount string
}

func (q *Queries) AddDiscount(ctx context.Context, arg AddDiscountParams) (Discount, error) {
	row := q.db.QueryRowContext(ctx, addDiscount,
		arg.Title,
		arg.Url,
		arg.Image,
		arg.Category,
		arg.Price,
		arg.OgPrice,
		arg.Discount,
	)
	var i Discount
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Url,
		&i.Image,
		&i.Category,
		&i.Price,
		&i.OgPrice,
		&i.Discount,
	)
	return i, err
}

const getDiscounts = `-- name: GetDiscounts :many
SELECT title, url AS Href,
image, category, price, og_price, discount
FROM discounts
`

type GetDiscountsRow struct {
	Title    string
	Href     string
	Image    string
	Category string
	Price    string
	OgPrice  string
	Discount string
}

func (q *Queries) GetDiscounts(ctx context.Context) ([]GetDiscountsRow, error) {
	rows, err := q.db.QueryContext(ctx, getDiscounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDiscountsRow
	for rows.Next() {
		var i GetDiscountsRow
		if err := rows.Scan(
			&i.Title,
			&i.Href,
			&i.Image,
			&i.Category,
			&i.Price,
			&i.OgPrice,
			&i.Discount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const resetDiscounts = `-- name: ResetDiscounts :exec
DELETE FROM discounts
`

func (q *Queries) ResetDiscounts(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetDiscounts)
	return err
}
